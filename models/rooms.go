// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Room is an object representing the database table.
type Room struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	BoardID   int       `boil:"board_id" json:"board_id" toml:"board_id" yaml:"board_id"`
	Status    int       `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *roomR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roomL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoomColumns = struct {
	ID        string
	BoardID   string
	Status    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	BoardID:   "board_id",
	Status:    "status",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// roomR is where relationships are stored.
type roomR struct {
	Board *Board
}

// roomL is where Load methods for each relationship are stored.
type roomL struct{}

var (
	roomColumns               = []string{"id", "board_id", "status", "created_at", "updated_at"}
	roomColumnsWithoutDefault = []string{"board_id", "status", "created_at", "updated_at"}
	roomColumnsWithDefault    = []string{"id"}
	roomPrimaryKeyColumns     = []string{"id"}
)

type (
	// RoomSlice is an alias for a slice of pointers to Room.
	// This should generally be used opposed to []Room.
	RoomSlice []*Room
	// RoomHook is the signature for custom Room hook methods
	RoomHook func(boil.Executor, *Room) error

	roomQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roomType                 = reflect.TypeOf(&Room{})
	roomMapping              = queries.MakeStructMapping(roomType)
	roomPrimaryKeyMapping, _ = queries.BindMapping(roomType, roomMapping, roomPrimaryKeyColumns)
	roomInsertCacheMut       sync.RWMutex
	roomInsertCache          = make(map[string]insertCache)
	roomUpdateCacheMut       sync.RWMutex
	roomUpdateCache          = make(map[string]updateCache)
	roomUpsertCacheMut       sync.RWMutex
	roomUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var roomBeforeInsertHooks []RoomHook
var roomBeforeUpdateHooks []RoomHook
var roomBeforeDeleteHooks []RoomHook
var roomBeforeUpsertHooks []RoomHook

var roomAfterInsertHooks []RoomHook
var roomAfterSelectHooks []RoomHook
var roomAfterUpdateHooks []RoomHook
var roomAfterDeleteHooks []RoomHook
var roomAfterUpsertHooks []RoomHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Room) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roomBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Room) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range roomBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Room) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range roomBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Room) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roomBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Room) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roomAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Room) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range roomAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Room) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range roomAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Room) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range roomAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Room) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roomAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoomHook registers your hook function for all future operations.
func AddRoomHook(hookPoint boil.HookPoint, roomHook RoomHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		roomBeforeInsertHooks = append(roomBeforeInsertHooks, roomHook)
	case boil.BeforeUpdateHook:
		roomBeforeUpdateHooks = append(roomBeforeUpdateHooks, roomHook)
	case boil.BeforeDeleteHook:
		roomBeforeDeleteHooks = append(roomBeforeDeleteHooks, roomHook)
	case boil.BeforeUpsertHook:
		roomBeforeUpsertHooks = append(roomBeforeUpsertHooks, roomHook)
	case boil.AfterInsertHook:
		roomAfterInsertHooks = append(roomAfterInsertHooks, roomHook)
	case boil.AfterSelectHook:
		roomAfterSelectHooks = append(roomAfterSelectHooks, roomHook)
	case boil.AfterUpdateHook:
		roomAfterUpdateHooks = append(roomAfterUpdateHooks, roomHook)
	case boil.AfterDeleteHook:
		roomAfterDeleteHooks = append(roomAfterDeleteHooks, roomHook)
	case boil.AfterUpsertHook:
		roomAfterUpsertHooks = append(roomAfterUpsertHooks, roomHook)
	}
}

// OneP returns a single room record from the query, and panics on error.
func (q roomQuery) OneP() *Room {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single room record from the query.
func (q roomQuery) One() (*Room, error) {
	o := &Room{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rooms")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Room records from the query, and panics on error.
func (q roomQuery) AllP() RoomSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Room records from the query.
func (q roomQuery) All() (RoomSlice, error) {
	var o []*Room

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Room slice")
	}

	if len(roomAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Room records in the query, and panics on error.
func (q roomQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Room records in the query.
func (q roomQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rooms rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q roomQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q roomQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rooms exists")
	}

	return count > 0, nil
}

// BoardG pointed to by the foreign key.
func (o *Room) BoardG(mods ...qm.QueryMod) boardQuery {
	return o.Board(boil.GetDB(), mods...)
}

// Board pointed to by the foreign key.
func (o *Room) Board(exec boil.Executor, mods ...qm.QueryMod) boardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.BoardID),
	}

	queryMods = append(queryMods, mods...)

	query := Boards(exec, queryMods...)
	queries.SetFrom(query.Query, "\"boards\"")

	return query
} // LoadBoard allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (roomL) LoadBoard(e boil.Executor, singular bool, maybeRoom interface{}) error {
	var slice []*Room
	var object *Room

	count := 1
	if singular {
		object = maybeRoom.(*Room)
	} else {
		slice = *maybeRoom.(*[]*Room)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &roomR{}
		}
		args[0] = object.BoardID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &roomR{}
			}
			args[i] = obj.BoardID
		}
	}

	query := fmt.Sprintf(
		"select * from \"boards\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Board")
	}
	defer results.Close()

	var resultSlice []*Board
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Board")
	}

	if len(roomAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Board = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BoardID == foreign.ID {
				local.R.Board = foreign
				break
			}
		}
	}

	return nil
}

// SetBoardG of the room to the related item.
// Sets o.R.Board to related.
// Adds o to related.R.Rooms.
// Uses the global database handle.
func (o *Room) SetBoardG(insert bool, related *Board) error {
	return o.SetBoard(boil.GetDB(), insert, related)
}

// SetBoardP of the room to the related item.
// Sets o.R.Board to related.
// Adds o to related.R.Rooms.
// Panics on error.
func (o *Room) SetBoardP(exec boil.Executor, insert bool, related *Board) {
	if err := o.SetBoard(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBoardGP of the room to the related item.
// Sets o.R.Board to related.
// Adds o to related.R.Rooms.
// Uses the global database handle and panics on error.
func (o *Room) SetBoardGP(insert bool, related *Board) {
	if err := o.SetBoard(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBoard of the room to the related item.
// Sets o.R.Board to related.
// Adds o to related.R.Rooms.
func (o *Room) SetBoard(exec boil.Executor, insert bool, related *Board) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rooms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"board_id"}),
		strmangle.WhereClause("\"", "\"", 2, roomPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BoardID = related.ID

	if o.R == nil {
		o.R = &roomR{
			Board: related,
		}
	} else {
		o.R.Board = related
	}

	if related.R == nil {
		related.R = &boardR{
			Rooms: RoomSlice{o},
		}
	} else {
		related.R.Rooms = append(related.R.Rooms, o)
	}

	return nil
}

// RoomsG retrieves all records.
func RoomsG(mods ...qm.QueryMod) roomQuery {
	return Rooms(boil.GetDB(), mods...)
}

// Rooms retrieves all the records using an executor.
func Rooms(exec boil.Executor, mods ...qm.QueryMod) roomQuery {
	mods = append(mods, qm.From("\"rooms\""))
	return roomQuery{NewQuery(exec, mods...)}
}

// FindRoomG retrieves a single record by ID.
func FindRoomG(id int, selectCols ...string) (*Room, error) {
	return FindRoom(boil.GetDB(), id, selectCols...)
}

// FindRoomGP retrieves a single record by ID, and panics on error.
func FindRoomGP(id int, selectCols ...string) *Room {
	retobj, err := FindRoom(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindRoom retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoom(exec boil.Executor, id int, selectCols ...string) (*Room, error) {
	roomObj := &Room{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rooms\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(roomObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rooms")
	}

	return roomObj, nil
}

// FindRoomP retrieves a single record by ID with an executor, and panics on error.
func FindRoomP(exec boil.Executor, id int, selectCols ...string) *Room {
	retobj, err := FindRoom(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Room) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Room) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Room) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Room) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no rooms provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roomColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	roomInsertCacheMut.RLock()
	cache, cached := roomInsertCache[key]
	roomInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			roomColumns,
			roomColumnsWithDefault,
			roomColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(roomType, roomMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roomType, roomMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rooms\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rooms\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rooms")
	}

	if !cached {
		roomInsertCacheMut.Lock()
		roomInsertCache[key] = cache
		roomInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Room record. See Update for
// whitelist behavior description.
func (o *Room) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Room record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Room) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Room, and panics on error.
// See Update for whitelist behavior description.
func (o *Room) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Room.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Room) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	roomUpdateCacheMut.RLock()
	cache, cached := roomUpdateCache[key]
	roomUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			roomColumns,
			roomPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update rooms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rooms\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roomPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roomType, roomMapping, append(wl, roomPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update rooms row")
	}

	if !cached {
		roomUpdateCacheMut.Lock()
		roomUpdateCache[key] = cache
		roomUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q roomQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q roomQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for rooms")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RoomSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o RoomSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o RoomSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoomSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rooms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roomPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in room slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Room) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Room) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Room) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Room) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no rooms provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roomColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roomUpsertCacheMut.RLock()
	cache, cached := roomUpsertCache[key]
	roomUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			roomColumns,
			roomColumnsWithDefault,
			roomColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			roomColumns,
			roomPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert rooms, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(roomPrimaryKeyColumns))
			copy(conflict, roomPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"rooms\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roomType, roomMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roomType, roomMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert rooms")
	}

	if !cached {
		roomUpsertCacheMut.Lock()
		roomUpsertCache[key] = cache
		roomUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Room record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Room) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Room record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Room) DeleteG() error {
	if o == nil {
		return errors.New("models: no Room provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Room record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Room) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Room record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Room) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Room provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roomPrimaryKeyMapping)
	sql := "DELETE FROM \"rooms\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from rooms")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q roomQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q roomQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no roomQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from rooms")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o RoomSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o RoomSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Room slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o RoomSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoomSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Room slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(roomBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rooms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roomPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from room slice")
	}

	if len(roomAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Room) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Room) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Room) ReloadG() error {
	if o == nil {
		return errors.New("models: no Room provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Room) Reload(exec boil.Executor) error {
	ret, err := FindRoom(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RoomSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RoomSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoomSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty RoomSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoomSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	rooms := RoomSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rooms\".* FROM \"rooms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roomPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&rooms)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoomSlice")
	}

	*o = rooms

	return nil
}

// RoomExists checks if the Room row exists.
func RoomExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rooms\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rooms exists")
	}

	return exists, nil
}

// RoomExistsG checks if the Room row exists.
func RoomExistsG(id int) (bool, error) {
	return RoomExists(boil.GetDB(), id)
}

// RoomExistsGP checks if the Room row exists. Panics on error.
func RoomExistsGP(id int) bool {
	e, err := RoomExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// RoomExistsP checks if the Room row exists. Panics on error.
func RoomExistsP(exec boil.Executor, id int) bool {
	e, err := RoomExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
