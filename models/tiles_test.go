// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testTiles(t *testing.T) {
	t.Parallel()

	query := Tiles(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testTilesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tile := &Tile{}
	if err = randomize.Struct(seed, tile, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tile.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = tile.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Tiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTilesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tile := &Tile{}
	if err = randomize.Struct(seed, tile, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tile.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Tiles(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Tiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTilesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tile := &Tile{}
	if err = randomize.Struct(seed, tile, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tile.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TileSlice{tile}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Tiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testTilesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tile := &Tile{}
	if err = randomize.Struct(seed, tile, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tile.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := TileExists(tx, tile.ID)
	if err != nil {
		t.Errorf("Unable to check if Tile exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TileExistsG to return true, but got false.")
	}
}
func testTilesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tile := &Tile{}
	if err = randomize.Struct(seed, tile, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tile.Insert(tx); err != nil {
		t.Error(err)
	}

	tileFound, err := FindTile(tx, tile.ID)
	if err != nil {
		t.Error(err)
	}

	if tileFound == nil {
		t.Error("want a record, got nil")
	}
}
func testTilesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tile := &Tile{}
	if err = randomize.Struct(seed, tile, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tile.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Tiles(tx).Bind(tile); err != nil {
		t.Error(err)
	}
}

func testTilesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tile := &Tile{}
	if err = randomize.Struct(seed, tile, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tile.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Tiles(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTilesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tileOne := &Tile{}
	tileTwo := &Tile{}
	if err = randomize.Struct(seed, tileOne, tileDBTypes, false, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}
	if err = randomize.Struct(seed, tileTwo, tileDBTypes, false, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tileOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = tileTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Tiles(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTilesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tileOne := &Tile{}
	tileTwo := &Tile{}
	if err = randomize.Struct(seed, tileOne, tileDBTypes, false, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}
	if err = randomize.Struct(seed, tileTwo, tileDBTypes, false, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tileOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = tileTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func tileBeforeInsertHook(e boil.Executor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileAfterInsertHook(e boil.Executor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileAfterSelectHook(e boil.Executor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileBeforeUpdateHook(e boil.Executor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileAfterUpdateHook(e boil.Executor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileBeforeDeleteHook(e boil.Executor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileAfterDeleteHook(e boil.Executor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileBeforeUpsertHook(e boil.Executor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileAfterUpsertHook(e boil.Executor, o *Tile) error {
	*o = Tile{}
	return nil
}

func testTilesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Tile{}
	o := &Tile{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tileDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Tile object: %s", err)
	}

	AddTileHook(boil.BeforeInsertHook, tileBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tileBeforeInsertHooks = []TileHook{}

	AddTileHook(boil.AfterInsertHook, tileAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tileAfterInsertHooks = []TileHook{}

	AddTileHook(boil.AfterSelectHook, tileAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tileAfterSelectHooks = []TileHook{}

	AddTileHook(boil.BeforeUpdateHook, tileBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tileBeforeUpdateHooks = []TileHook{}

	AddTileHook(boil.AfterUpdateHook, tileAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tileAfterUpdateHooks = []TileHook{}

	AddTileHook(boil.BeforeDeleteHook, tileBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tileBeforeDeleteHooks = []TileHook{}

	AddTileHook(boil.AfterDeleteHook, tileAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tileAfterDeleteHooks = []TileHook{}

	AddTileHook(boil.BeforeUpsertHook, tileBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tileBeforeUpsertHooks = []TileHook{}

	AddTileHook(boil.AfterUpsertHook, tileAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tileAfterUpsertHooks = []TileHook{}
}
func testTilesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tile := &Tile{}
	if err = randomize.Struct(seed, tile, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tile.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTilesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tile := &Tile{}
	if err = randomize.Struct(seed, tile, tileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tile.Insert(tx, tileColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Tiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTileToOneBoardUsingBoard(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Tile
	var foreign Board

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tileDBTypes, false, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, boardDBTypes, false, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.BoardID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Board(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TileSlice{&local}
	if err = local.L.LoadBoard(tx, false, (*[]*Tile)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Board == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Board = nil
	if err = local.L.LoadBoard(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Board == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTileToOnePlayerUsingPlayer(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Tile
	var foreign Player

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	local.PlayerID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.PlayerID.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Player(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TileSlice{&local}
	if err = local.L.LoadPlayer(tx, false, (*[]*Tile)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Player = nil
	if err = local.L.LoadPlayer(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTileToOneSetOpBoardUsingBoard(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tile
	var b, c Board

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, boardDBTypes, false, strmangle.SetComplement(boardPrimaryKeyColumns, boardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, boardDBTypes, false, strmangle.SetComplement(boardPrimaryKeyColumns, boardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Board{&b, &c} {
		err = a.SetBoard(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Board != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Tiles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BoardID != x.ID {
			t.Error("foreign key was wrong value", a.BoardID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BoardID))
		reflect.Indirect(reflect.ValueOf(&a.BoardID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BoardID != x.ID {
			t.Error("foreign key was wrong value", a.BoardID, x.ID)
		}
	}
}
func testTileToOneSetOpPlayerUsingPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tile
	var b, c Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Player{&b, &c} {
		err = a.SetPlayer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Player != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Tiles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlayerID.Int != x.ID {
			t.Error("foreign key was wrong value", a.PlayerID.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlayerID.Int))
		reflect.Indirect(reflect.ValueOf(&a.PlayerID.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PlayerID.Int != x.ID {
			t.Error("foreign key was wrong value", a.PlayerID.Int, x.ID)
		}
	}
}

func testTileToOneRemoveOpPlayerUsingPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tile
	var b Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPlayer(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePlayer(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Player(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Player != nil {
		t.Error("R struct entry should be nil")
	}

	if a.PlayerID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Tiles) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTilesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tile := &Tile{}
	if err = randomize.Struct(seed, tile, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tile.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = tile.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTilesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tile := &Tile{}
	if err = randomize.Struct(seed, tile, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tile.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TileSlice{tile}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testTilesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tile := &Tile{}
	if err = randomize.Struct(seed, tile, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tile.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Tiles(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tileDBTypes = map[string]string{`BoardID`: `integer`, `CreatedAt`: `timestamp without time zone`, `ID`: `integer`, `PlayerID`: `integer`, `UpdatedAt`: `timestamp without time zone`}
	_           = bytes.MinRead
)

func testTilesUpdate(t *testing.T) {
	t.Parallel()

	if len(tileColumns) == len(tilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	tile := &Tile{}
	if err = randomize.Struct(seed, tile, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tile.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, tile, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err = tile.Update(tx); err != nil {
		t.Error(err)
	}
}

func testTilesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tileColumns) == len(tilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	tile := &Tile{}
	if err = randomize.Struct(seed, tile, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tile.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, tile, tileDBTypes, true, tilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tileColumns, tilePrimaryKeyColumns) {
		fields = tileColumns
	} else {
		fields = strmangle.SetComplement(
			tileColumns,
			tilePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(tile))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := TileSlice{tile}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testTilesUpsert(t *testing.T) {
	t.Parallel()

	if len(tileColumns) == len(tilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	tile := Tile{}
	if err = randomize.Struct(seed, &tile, tileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tile.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Tile: %s", err)
	}

	count, err := Tiles(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &tile, tileDBTypes, false, tilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err = tile.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Tile: %s", err)
	}

	count, err = Tiles(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
