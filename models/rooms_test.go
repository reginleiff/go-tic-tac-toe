// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testRooms(t *testing.T) {
	t.Parallel()

	query := Rooms(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testRoomsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	room := &Room{}
	if err = randomize.Struct(seed, room, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = room.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = room.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Rooms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoomsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	room := &Room{}
	if err = randomize.Struct(seed, room, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = room.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Rooms(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Rooms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoomsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	room := &Room{}
	if err = randomize.Struct(seed, room, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = room.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RoomSlice{room}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Rooms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testRoomsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	room := &Room{}
	if err = randomize.Struct(seed, room, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = room.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := RoomExists(tx, room.ID)
	if err != nil {
		t.Errorf("Unable to check if Room exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoomExistsG to return true, but got false.")
	}
}
func testRoomsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	room := &Room{}
	if err = randomize.Struct(seed, room, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = room.Insert(tx); err != nil {
		t.Error(err)
	}

	roomFound, err := FindRoom(tx, room.ID)
	if err != nil {
		t.Error(err)
	}

	if roomFound == nil {
		t.Error("want a record, got nil")
	}
}
func testRoomsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	room := &Room{}
	if err = randomize.Struct(seed, room, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = room.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Rooms(tx).Bind(room); err != nil {
		t.Error(err)
	}
}

func testRoomsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	room := &Room{}
	if err = randomize.Struct(seed, room, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = room.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Rooms(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoomsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roomOne := &Room{}
	roomTwo := &Room{}
	if err = randomize.Struct(seed, roomOne, roomDBTypes, false, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}
	if err = randomize.Struct(seed, roomTwo, roomDBTypes, false, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roomOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = roomTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Rooms(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoomsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roomOne := &Room{}
	roomTwo := &Room{}
	if err = randomize.Struct(seed, roomOne, roomDBTypes, false, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}
	if err = randomize.Struct(seed, roomTwo, roomDBTypes, false, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roomOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = roomTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Rooms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func roomBeforeInsertHook(e boil.Executor, o *Room) error {
	*o = Room{}
	return nil
}

func roomAfterInsertHook(e boil.Executor, o *Room) error {
	*o = Room{}
	return nil
}

func roomAfterSelectHook(e boil.Executor, o *Room) error {
	*o = Room{}
	return nil
}

func roomBeforeUpdateHook(e boil.Executor, o *Room) error {
	*o = Room{}
	return nil
}

func roomAfterUpdateHook(e boil.Executor, o *Room) error {
	*o = Room{}
	return nil
}

func roomBeforeDeleteHook(e boil.Executor, o *Room) error {
	*o = Room{}
	return nil
}

func roomAfterDeleteHook(e boil.Executor, o *Room) error {
	*o = Room{}
	return nil
}

func roomBeforeUpsertHook(e boil.Executor, o *Room) error {
	*o = Room{}
	return nil
}

func roomAfterUpsertHook(e boil.Executor, o *Room) error {
	*o = Room{}
	return nil
}

func testRoomsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Room{}
	o := &Room{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, roomDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Room object: %s", err)
	}

	AddRoomHook(boil.BeforeInsertHook, roomBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	roomBeforeInsertHooks = []RoomHook{}

	AddRoomHook(boil.AfterInsertHook, roomAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	roomAfterInsertHooks = []RoomHook{}

	AddRoomHook(boil.AfterSelectHook, roomAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	roomAfterSelectHooks = []RoomHook{}

	AddRoomHook(boil.BeforeUpdateHook, roomBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	roomBeforeUpdateHooks = []RoomHook{}

	AddRoomHook(boil.AfterUpdateHook, roomAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	roomAfterUpdateHooks = []RoomHook{}

	AddRoomHook(boil.BeforeDeleteHook, roomBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	roomBeforeDeleteHooks = []RoomHook{}

	AddRoomHook(boil.AfterDeleteHook, roomAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	roomAfterDeleteHooks = []RoomHook{}

	AddRoomHook(boil.BeforeUpsertHook, roomBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	roomBeforeUpsertHooks = []RoomHook{}

	AddRoomHook(boil.AfterUpsertHook, roomAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	roomAfterUpsertHooks = []RoomHook{}
}
func testRoomsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	room := &Room{}
	if err = randomize.Struct(seed, room, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = room.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Rooms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoomsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	room := &Room{}
	if err = randomize.Struct(seed, room, roomDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = room.Insert(tx, roomColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Rooms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoomToManyPlayers(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Room
	var b, c Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, playerDBTypes, false, playerColumnsWithDefault...)
	randomize.Struct(seed, &c, playerDBTypes, false, playerColumnsWithDefault...)

	b.RoomID.Valid = true
	c.RoomID.Valid = true
	b.RoomID.Int = a.ID
	c.RoomID.Int = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	player, err := a.Players(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range player {
		if v.RoomID.Int == b.RoomID.Int {
			bFound = true
		}
		if v.RoomID.Int == c.RoomID.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoomSlice{&a}
	if err = a.L.LoadPlayers(tx, false, (*[]*Room)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Players); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Players = nil
	if err = a.L.LoadPlayers(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Players); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", player)
	}
}

func testRoomToManyAddOpPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Room
	var b, c, d, e Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Player{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Player{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RoomID.Int {
			t.Error("foreign key was wrong value", a.ID, first.RoomID.Int)
		}
		if a.ID != second.RoomID.Int {
			t.Error("foreign key was wrong value", a.ID, second.RoomID.Int)
		}

		if first.R.Room != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Room != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Players[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Players[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Players(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRoomToManySetOpPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Room
	var b, c, d, e Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Player{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetPlayers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Players(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPlayers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Players(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RoomID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RoomID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.RoomID.Int {
		t.Error("foreign key was wrong value", a.ID, d.RoomID.Int)
	}
	if a.ID != e.RoomID.Int {
		t.Error("foreign key was wrong value", a.ID, e.RoomID.Int)
	}

	if b.R.Room != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Room != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Room != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Room != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Players[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Players[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRoomToManyRemoveOpPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Room
	var b, c, d, e Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Player{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddPlayers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Players(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePlayers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Players(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RoomID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RoomID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Room != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Room != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Room != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Room != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Players) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Players[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Players[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRoomToOneBoardUsingBoard(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Room
	var foreign Board

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roomDBTypes, false, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, boardDBTypes, false, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.BoardID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Board(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RoomSlice{&local}
	if err = local.L.LoadBoard(tx, false, (*[]*Room)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Board == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Board = nil
	if err = local.L.LoadBoard(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Board == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoomToOneSetOpBoardUsingBoard(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Room
	var b, c Board

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, boardDBTypes, false, strmangle.SetComplement(boardPrimaryKeyColumns, boardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, boardDBTypes, false, strmangle.SetComplement(boardPrimaryKeyColumns, boardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Board{&b, &c} {
		err = a.SetBoard(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Board != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Rooms[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BoardID != x.ID {
			t.Error("foreign key was wrong value", a.BoardID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BoardID))
		reflect.Indirect(reflect.ValueOf(&a.BoardID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BoardID != x.ID {
			t.Error("foreign key was wrong value", a.BoardID, x.ID)
		}
	}
}
func testRoomsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	room := &Room{}
	if err = randomize.Struct(seed, room, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = room.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = room.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testRoomsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	room := &Room{}
	if err = randomize.Struct(seed, room, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = room.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RoomSlice{room}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testRoomsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	room := &Room{}
	if err = randomize.Struct(seed, room, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = room.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Rooms(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roomDBTypes = map[string]string{`BoardID`: `integer`, `CreatedAt`: `timestamp without time zone`, `ID`: `integer`, `Status`: `integer`, `UpdatedAt`: `timestamp without time zone`}
	_           = bytes.MinRead
)

func testRoomsUpdate(t *testing.T) {
	t.Parallel()

	if len(roomColumns) == len(roomPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	room := &Room{}
	if err = randomize.Struct(seed, room, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = room.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Rooms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, room, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	if err = room.Update(tx); err != nil {
		t.Error(err)
	}
}

func testRoomsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roomColumns) == len(roomPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	room := &Room{}
	if err = randomize.Struct(seed, room, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = room.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Rooms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, room, roomDBTypes, true, roomPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roomColumns, roomPrimaryKeyColumns) {
		fields = roomColumns
	} else {
		fields = strmangle.SetComplement(
			roomColumns,
			roomPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(room))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := RoomSlice{room}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testRoomsUpsert(t *testing.T) {
	t.Parallel()

	if len(roomColumns) == len(roomPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	room := Room{}
	if err = randomize.Struct(seed, &room, roomDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = room.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Room: %s", err)
	}

	count, err := Rooms(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &room, roomDBTypes, false, roomPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	if err = room.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Room: %s", err)
	}

	count, err = Rooms(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
