// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Boards", testBoards)
	t.Run("GooseDBVersions", testGooseDBVersions)
	t.Run("Players", testPlayers)
	t.Run("Rooms", testRooms)
	t.Run("Tiles", testTiles)
}

func TestDelete(t *testing.T) {
	t.Run("Boards", testBoardsDelete)
	t.Run("GooseDBVersions", testGooseDBVersionsDelete)
	t.Run("Players", testPlayersDelete)
	t.Run("Rooms", testRoomsDelete)
	t.Run("Tiles", testTilesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Boards", testBoardsQueryDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsQueryDeleteAll)
	t.Run("Players", testPlayersQueryDeleteAll)
	t.Run("Rooms", testRoomsQueryDeleteAll)
	t.Run("Tiles", testTilesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Boards", testBoardsSliceDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceDeleteAll)
	t.Run("Players", testPlayersSliceDeleteAll)
	t.Run("Rooms", testRoomsSliceDeleteAll)
	t.Run("Tiles", testTilesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Boards", testBoardsExists)
	t.Run("GooseDBVersions", testGooseDBVersionsExists)
	t.Run("Players", testPlayersExists)
	t.Run("Rooms", testRoomsExists)
	t.Run("Tiles", testTilesExists)
}

func TestFind(t *testing.T) {
	t.Run("Boards", testBoardsFind)
	t.Run("GooseDBVersions", testGooseDBVersionsFind)
	t.Run("Players", testPlayersFind)
	t.Run("Rooms", testRoomsFind)
	t.Run("Tiles", testTilesFind)
}

func TestBind(t *testing.T) {
	t.Run("Boards", testBoardsBind)
	t.Run("GooseDBVersions", testGooseDBVersionsBind)
	t.Run("Players", testPlayersBind)
	t.Run("Rooms", testRoomsBind)
	t.Run("Tiles", testTilesBind)
}

func TestOne(t *testing.T) {
	t.Run("Boards", testBoardsOne)
	t.Run("GooseDBVersions", testGooseDBVersionsOne)
	t.Run("Players", testPlayersOne)
	t.Run("Rooms", testRoomsOne)
	t.Run("Tiles", testTilesOne)
}

func TestAll(t *testing.T) {
	t.Run("Boards", testBoardsAll)
	t.Run("GooseDBVersions", testGooseDBVersionsAll)
	t.Run("Players", testPlayersAll)
	t.Run("Rooms", testRoomsAll)
	t.Run("Tiles", testTilesAll)
}

func TestCount(t *testing.T) {
	t.Run("Boards", testBoardsCount)
	t.Run("GooseDBVersions", testGooseDBVersionsCount)
	t.Run("Players", testPlayersCount)
	t.Run("Rooms", testRoomsCount)
	t.Run("Tiles", testTilesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Boards", testBoardsHooks)
	t.Run("GooseDBVersions", testGooseDBVersionsHooks)
	t.Run("Players", testPlayersHooks)
	t.Run("Rooms", testRoomsHooks)
	t.Run("Tiles", testTilesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Boards", testBoardsInsert)
	t.Run("Boards", testBoardsInsertWhitelist)
	t.Run("GooseDBVersions", testGooseDBVersionsInsert)
	t.Run("GooseDBVersions", testGooseDBVersionsInsertWhitelist)
	t.Run("Players", testPlayersInsert)
	t.Run("Players", testPlayersInsertWhitelist)
	t.Run("Rooms", testRoomsInsert)
	t.Run("Rooms", testRoomsInsertWhitelist)
	t.Run("Tiles", testTilesInsert)
	t.Run("Tiles", testTilesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("PlayerToPlayerUsingRoom", testPlayerToOnePlayerUsingRoom)
	t.Run("RoomToBoardUsingBoard", testRoomToOneBoardUsingBoard)
	t.Run("TileToBoardUsingBoard", testTileToOneBoardUsingBoard)
	t.Run("TileToPlayerUsingCapturedBy", testTileToOnePlayerUsingCapturedBy)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("BoardToRooms", testBoardToManyRooms)
	t.Run("BoardToTiles", testBoardToManyTiles)
	t.Run("PlayerToRoomPlayers", testPlayerToManyRoomPlayers)
	t.Run("PlayerToCapturedByTiles", testPlayerToManyCapturedByTiles)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("PlayerToPlayerUsingRoom", testPlayerToOneSetOpPlayerUsingRoom)
	t.Run("RoomToBoardUsingBoard", testRoomToOneSetOpBoardUsingBoard)
	t.Run("TileToBoardUsingBoard", testTileToOneSetOpBoardUsingBoard)
	t.Run("TileToPlayerUsingCapturedBy", testTileToOneSetOpPlayerUsingCapturedBy)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("PlayerToPlayerUsingRoom", testPlayerToOneRemoveOpPlayerUsingRoom)
	t.Run("TileToPlayerUsingCapturedBy", testTileToOneRemoveOpPlayerUsingCapturedBy)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("BoardToRooms", testBoardToManyAddOpRooms)
	t.Run("BoardToTiles", testBoardToManyAddOpTiles)
	t.Run("PlayerToRoomPlayers", testPlayerToManyAddOpRoomPlayers)
	t.Run("PlayerToCapturedByTiles", testPlayerToManyAddOpCapturedByTiles)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("PlayerToRoomPlayers", testPlayerToManySetOpRoomPlayers)
	t.Run("PlayerToCapturedByTiles", testPlayerToManySetOpCapturedByTiles)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("PlayerToRoomPlayers", testPlayerToManyRemoveOpRoomPlayers)
	t.Run("PlayerToCapturedByTiles", testPlayerToManyRemoveOpCapturedByTiles)
}

func TestReload(t *testing.T) {
	t.Run("Boards", testBoardsReload)
	t.Run("GooseDBVersions", testGooseDBVersionsReload)
	t.Run("Players", testPlayersReload)
	t.Run("Rooms", testRoomsReload)
	t.Run("Tiles", testTilesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Boards", testBoardsReloadAll)
	t.Run("GooseDBVersions", testGooseDBVersionsReloadAll)
	t.Run("Players", testPlayersReloadAll)
	t.Run("Rooms", testRoomsReloadAll)
	t.Run("Tiles", testTilesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Boards", testBoardsSelect)
	t.Run("GooseDBVersions", testGooseDBVersionsSelect)
	t.Run("Players", testPlayersSelect)
	t.Run("Rooms", testRoomsSelect)
	t.Run("Tiles", testTilesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Boards", testBoardsUpdate)
	t.Run("GooseDBVersions", testGooseDBVersionsUpdate)
	t.Run("Players", testPlayersUpdate)
	t.Run("Rooms", testRoomsUpdate)
	t.Run("Tiles", testTilesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Boards", testBoardsSliceUpdateAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceUpdateAll)
	t.Run("Players", testPlayersSliceUpdateAll)
	t.Run("Rooms", testRoomsSliceUpdateAll)
	t.Run("Tiles", testTilesSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Boards", testBoardsUpsert)
	t.Run("GooseDBVersions", testGooseDBVersionsUpsert)
	t.Run("Players", testPlayersUpsert)
	t.Run("Rooms", testRoomsUpsert)
	t.Run("Tiles", testTilesUpsert)
}
