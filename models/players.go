// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Player is an object representing the database table.
type Player struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	RoomID    null.Int  `boil:"room_id" json:"room_id,omitempty" toml:"room_id" yaml:"room_id,omitempty"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *playerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerColumns = struct {
	ID        string
	RoomID    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	RoomID:    "room_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// playerR is where relationships are stored.
type playerR struct {
	Room        *Player
	RoomPlayers PlayerSlice
	Tiles       TileSlice
}

// playerL is where Load methods for each relationship are stored.
type playerL struct{}

var (
	playerColumns               = []string{"id", "room_id", "created_at", "updated_at"}
	playerColumnsWithoutDefault = []string{"room_id", "created_at", "updated_at"}
	playerColumnsWithDefault    = []string{"id"}
	playerPrimaryKeyColumns     = []string{"id"}
)

type (
	// PlayerSlice is an alias for a slice of pointers to Player.
	// This should generally be used opposed to []Player.
	PlayerSlice []*Player
	// PlayerHook is the signature for custom Player hook methods
	PlayerHook func(boil.Executor, *Player) error

	playerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerType                 = reflect.TypeOf(&Player{})
	playerMapping              = queries.MakeStructMapping(playerType)
	playerPrimaryKeyMapping, _ = queries.BindMapping(playerType, playerMapping, playerPrimaryKeyColumns)
	playerInsertCacheMut       sync.RWMutex
	playerInsertCache          = make(map[string]insertCache)
	playerUpdateCacheMut       sync.RWMutex
	playerUpdateCache          = make(map[string]updateCache)
	playerUpsertCacheMut       sync.RWMutex
	playerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var playerBeforeInsertHooks []PlayerHook
var playerBeforeUpdateHooks []PlayerHook
var playerBeforeDeleteHooks []PlayerHook
var playerBeforeUpsertHooks []PlayerHook

var playerAfterInsertHooks []PlayerHook
var playerAfterSelectHooks []PlayerHook
var playerAfterUpdateHooks []PlayerHook
var playerAfterDeleteHooks []PlayerHook
var playerAfterUpsertHooks []PlayerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Player) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Player) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Player) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Player) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Player) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Player) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range playerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Player) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Player) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Player) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerHook registers your hook function for all future operations.
func AddPlayerHook(hookPoint boil.HookPoint, playerHook PlayerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		playerBeforeInsertHooks = append(playerBeforeInsertHooks, playerHook)
	case boil.BeforeUpdateHook:
		playerBeforeUpdateHooks = append(playerBeforeUpdateHooks, playerHook)
	case boil.BeforeDeleteHook:
		playerBeforeDeleteHooks = append(playerBeforeDeleteHooks, playerHook)
	case boil.BeforeUpsertHook:
		playerBeforeUpsertHooks = append(playerBeforeUpsertHooks, playerHook)
	case boil.AfterInsertHook:
		playerAfterInsertHooks = append(playerAfterInsertHooks, playerHook)
	case boil.AfterSelectHook:
		playerAfterSelectHooks = append(playerAfterSelectHooks, playerHook)
	case boil.AfterUpdateHook:
		playerAfterUpdateHooks = append(playerAfterUpdateHooks, playerHook)
	case boil.AfterDeleteHook:
		playerAfterDeleteHooks = append(playerAfterDeleteHooks, playerHook)
	case boil.AfterUpsertHook:
		playerAfterUpsertHooks = append(playerAfterUpsertHooks, playerHook)
	}
}

// OneP returns a single player record from the query, and panics on error.
func (q playerQuery) OneP() *Player {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single player record from the query.
func (q playerQuery) One() (*Player, error) {
	o := &Player{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for players")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Player records from the query, and panics on error.
func (q playerQuery) AllP() PlayerSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Player records from the query.
func (q playerQuery) All() (PlayerSlice, error) {
	var o []*Player

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Player slice")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Player records in the query, and panics on error.
func (q playerQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Player records in the query.
func (q playerQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count players rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q playerQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q playerQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if players exists")
	}

	return count > 0, nil
}

// RoomG pointed to by the foreign key.
func (o *Player) RoomG(mods ...qm.QueryMod) playerQuery {
	return o.Room(boil.GetDB(), mods...)
}

// Room pointed to by the foreign key.
func (o *Player) Room(exec boil.Executor, mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.RoomID),
	}

	queryMods = append(queryMods, mods...)

	query := Players(exec, queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// RoomPlayersG retrieves all the player's players via room_id column.
func (o *Player) RoomPlayersG(mods ...qm.QueryMod) playerQuery {
	return o.RoomPlayers(boil.GetDB(), mods...)
}

// RoomPlayers retrieves all the player's players with an executor via room_id column.
func (o *Player) RoomPlayers(exec boil.Executor, mods ...qm.QueryMod) playerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"players\".\"room_id\"=?", o.ID),
	)

	query := Players(exec, queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"players\".*"})
	}

	return query
}

// TilesG retrieves all the tile's tiles.
func (o *Player) TilesG(mods ...qm.QueryMod) tileQuery {
	return o.Tiles(boil.GetDB(), mods...)
}

// Tiles retrieves all the tile's tiles with an executor.
func (o *Player) Tiles(exec boil.Executor, mods ...qm.QueryMod) tileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tiles\".\"player_id\"=?", o.ID),
	)

	query := Tiles(exec, queryMods...)
	queries.SetFrom(query.Query, "\"tiles\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tiles\".*"})
	}

	return query
}

// LoadRoom allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (playerL) LoadRoom(e boil.Executor, singular bool, maybePlayer interface{}) error {
	var slice []*Player
	var object *Player

	count := 1
	if singular {
		object = maybePlayer.(*Player)
	} else {
		slice = *maybePlayer.(*[]*Player)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		args[0] = object.RoomID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}
			args[i] = obj.RoomID
		}
	}

	query := fmt.Sprintf(
		"select * from \"players\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}
	defer results.Close()

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Room = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoomID.Int == foreign.ID {
				local.R.Room = foreign
				break
			}
		}
	}

	return nil
}

// LoadRoomPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (playerL) LoadRoomPlayers(e boil.Executor, singular bool, maybePlayer interface{}) error {
	var slice []*Player
	var object *Player

	count := 1
	if singular {
		object = maybePlayer.(*Player)
	} else {
		slice = *maybePlayer.(*[]*Player)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"players\" where \"room_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load players")
	}
	defer results.Close()

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice players")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoomPlayers = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RoomID.Int {
				local.R.RoomPlayers = append(local.R.RoomPlayers, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTiles allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (playerL) LoadTiles(e boil.Executor, singular bool, maybePlayer interface{}) error {
	var slice []*Player
	var object *Player

	count := 1
	if singular {
		object = maybePlayer.(*Player)
	} else {
		slice = *maybePlayer.(*[]*Player)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"tiles\" where \"player_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tiles")
	}
	defer results.Close()

	var resultSlice []*Tile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tiles")
	}

	if len(tileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tiles = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlayerID.Int {
				local.R.Tiles = append(local.R.Tiles, foreign)
				break
			}
		}
	}

	return nil
}

// SetRoomG of the player to the related item.
// Sets o.R.Room to related.
// Adds o to related.R.RoomPlayers.
// Uses the global database handle.
func (o *Player) SetRoomG(insert bool, related *Player) error {
	return o.SetRoom(boil.GetDB(), insert, related)
}

// SetRoomP of the player to the related item.
// Sets o.R.Room to related.
// Adds o to related.R.RoomPlayers.
// Panics on error.
func (o *Player) SetRoomP(exec boil.Executor, insert bool, related *Player) {
	if err := o.SetRoom(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoomGP of the player to the related item.
// Sets o.R.Room to related.
// Adds o to related.R.RoomPlayers.
// Uses the global database handle and panics on error.
func (o *Player) SetRoomGP(insert bool, related *Player) {
	if err := o.SetRoom(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoom of the player to the related item.
// Sets o.R.Room to related.
// Adds o to related.R.RoomPlayers.
func (o *Player) SetRoom(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"room_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoomID.Int = related.ID
	o.RoomID.Valid = true

	if o.R == nil {
		o.R = &playerR{
			Room: related,
		}
	} else {
		o.R.Room = related
	}

	if related.R == nil {
		related.R = &playerR{
			RoomPlayers: PlayerSlice{o},
		}
	} else {
		related.R.RoomPlayers = append(related.R.RoomPlayers, o)
	}

	return nil
}

// RemoveRoomG relationship.
// Sets o.R.Room to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Player) RemoveRoomG(related *Player) error {
	return o.RemoveRoom(boil.GetDB(), related)
}

// RemoveRoomP relationship.
// Sets o.R.Room to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Player) RemoveRoomP(exec boil.Executor, related *Player) {
	if err := o.RemoveRoom(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoomGP relationship.
// Sets o.R.Room to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Player) RemoveRoomGP(related *Player) {
	if err := o.RemoveRoom(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoom relationship.
// Sets o.R.Room to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Player) RemoveRoom(exec boil.Executor, related *Player) error {
	var err error

	o.RoomID.Valid = false
	if err = o.Update(exec, "room_id"); err != nil {
		o.RoomID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Room = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RoomPlayers {
		if o.RoomID.Int != ri.RoomID.Int {
			continue
		}

		ln := len(related.R.RoomPlayers)
		if ln > 1 && i < ln-1 {
			related.R.RoomPlayers[i] = related.R.RoomPlayers[ln-1]
		}
		related.R.RoomPlayers = related.R.RoomPlayers[:ln-1]
		break
	}
	return nil
}

// AddRoomPlayersG adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.RoomPlayers.
// Sets related.R.Room appropriately.
// Uses the global database handle.
func (o *Player) AddRoomPlayersG(insert bool, related ...*Player) error {
	return o.AddRoomPlayers(boil.GetDB(), insert, related...)
}

// AddRoomPlayersP adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.RoomPlayers.
// Sets related.R.Room appropriately.
// Panics on error.
func (o *Player) AddRoomPlayersP(exec boil.Executor, insert bool, related ...*Player) {
	if err := o.AddRoomPlayers(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRoomPlayersGP adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.RoomPlayers.
// Sets related.R.Room appropriately.
// Uses the global database handle and panics on error.
func (o *Player) AddRoomPlayersGP(insert bool, related ...*Player) {
	if err := o.AddRoomPlayers(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRoomPlayers adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.RoomPlayers.
// Sets related.R.Room appropriately.
func (o *Player) AddRoomPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RoomID.Int = o.ID
			rel.RoomID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"room_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RoomID.Int = o.ID
			rel.RoomID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &playerR{
			RoomPlayers: related,
		}
	} else {
		o.R.RoomPlayers = append(o.R.RoomPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerR{
				Room: o,
			}
		} else {
			rel.R.Room = o
		}
	}
	return nil
}

// SetRoomPlayersG removes all previously related items of the
// player replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Room's RoomPlayers accordingly.
// Replaces o.R.RoomPlayers with related.
// Sets related.R.Room's RoomPlayers accordingly.
// Uses the global database handle.
func (o *Player) SetRoomPlayersG(insert bool, related ...*Player) error {
	return o.SetRoomPlayers(boil.GetDB(), insert, related...)
}

// SetRoomPlayersP removes all previously related items of the
// player replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Room's RoomPlayers accordingly.
// Replaces o.R.RoomPlayers with related.
// Sets related.R.Room's RoomPlayers accordingly.
// Panics on error.
func (o *Player) SetRoomPlayersP(exec boil.Executor, insert bool, related ...*Player) {
	if err := o.SetRoomPlayers(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoomPlayersGP removes all previously related items of the
// player replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Room's RoomPlayers accordingly.
// Replaces o.R.RoomPlayers with related.
// Sets related.R.Room's RoomPlayers accordingly.
// Uses the global database handle and panics on error.
func (o *Player) SetRoomPlayersGP(insert bool, related ...*Player) {
	if err := o.SetRoomPlayers(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoomPlayers removes all previously related items of the
// player replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Room's RoomPlayers accordingly.
// Replaces o.R.RoomPlayers with related.
// Sets related.R.Room's RoomPlayers accordingly.
func (o *Player) SetRoomPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	query := "update \"players\" set \"room_id\" = null where \"room_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RoomPlayers {
			rel.RoomID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Room = nil
		}

		o.R.RoomPlayers = nil
	}
	return o.AddRoomPlayers(exec, insert, related...)
}

// RemoveRoomPlayersG relationships from objects passed in.
// Removes related items from R.RoomPlayers (uses pointer comparison, removal does not keep order)
// Sets related.R.Room.
// Uses the global database handle.
func (o *Player) RemoveRoomPlayersG(related ...*Player) error {
	return o.RemoveRoomPlayers(boil.GetDB(), related...)
}

// RemoveRoomPlayersP relationships from objects passed in.
// Removes related items from R.RoomPlayers (uses pointer comparison, removal does not keep order)
// Sets related.R.Room.
// Panics on error.
func (o *Player) RemoveRoomPlayersP(exec boil.Executor, related ...*Player) {
	if err := o.RemoveRoomPlayers(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoomPlayersGP relationships from objects passed in.
// Removes related items from R.RoomPlayers (uses pointer comparison, removal does not keep order)
// Sets related.R.Room.
// Uses the global database handle and panics on error.
func (o *Player) RemoveRoomPlayersGP(related ...*Player) {
	if err := o.RemoveRoomPlayers(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoomPlayers relationships from objects passed in.
// Removes related items from R.RoomPlayers (uses pointer comparison, removal does not keep order)
// Sets related.R.Room.
func (o *Player) RemoveRoomPlayers(exec boil.Executor, related ...*Player) error {
	var err error
	for _, rel := range related {
		rel.RoomID.Valid = false
		if rel.R != nil {
			rel.R.Room = nil
		}
		if err = rel.Update(exec, "room_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoomPlayers {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoomPlayers)
			if ln > 1 && i < ln-1 {
				o.R.RoomPlayers[i] = o.R.RoomPlayers[ln-1]
			}
			o.R.RoomPlayers = o.R.RoomPlayers[:ln-1]
			break
		}
	}

	return nil
}

// AddTilesG adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.Tiles.
// Sets related.R.Player appropriately.
// Uses the global database handle.
func (o *Player) AddTilesG(insert bool, related ...*Tile) error {
	return o.AddTiles(boil.GetDB(), insert, related...)
}

// AddTilesP adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.Tiles.
// Sets related.R.Player appropriately.
// Panics on error.
func (o *Player) AddTilesP(exec boil.Executor, insert bool, related ...*Tile) {
	if err := o.AddTiles(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTilesGP adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.Tiles.
// Sets related.R.Player appropriately.
// Uses the global database handle and panics on error.
func (o *Player) AddTilesGP(insert bool, related ...*Tile) {
	if err := o.AddTiles(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTiles adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.Tiles.
// Sets related.R.Player appropriately.
func (o *Player) AddTiles(exec boil.Executor, insert bool, related ...*Tile) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlayerID.Int = o.ID
			rel.PlayerID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tiles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
				strmangle.WhereClause("\"", "\"", 2, tilePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlayerID.Int = o.ID
			rel.PlayerID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &playerR{
			Tiles: related,
		}
	} else {
		o.R.Tiles = append(o.R.Tiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tileR{
				Player: o,
			}
		} else {
			rel.R.Player = o
		}
	}
	return nil
}

// SetTilesG removes all previously related items of the
// player replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Player's Tiles accordingly.
// Replaces o.R.Tiles with related.
// Sets related.R.Player's Tiles accordingly.
// Uses the global database handle.
func (o *Player) SetTilesG(insert bool, related ...*Tile) error {
	return o.SetTiles(boil.GetDB(), insert, related...)
}

// SetTilesP removes all previously related items of the
// player replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Player's Tiles accordingly.
// Replaces o.R.Tiles with related.
// Sets related.R.Player's Tiles accordingly.
// Panics on error.
func (o *Player) SetTilesP(exec boil.Executor, insert bool, related ...*Tile) {
	if err := o.SetTiles(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTilesGP removes all previously related items of the
// player replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Player's Tiles accordingly.
// Replaces o.R.Tiles with related.
// Sets related.R.Player's Tiles accordingly.
// Uses the global database handle and panics on error.
func (o *Player) SetTilesGP(insert bool, related ...*Tile) {
	if err := o.SetTiles(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTiles removes all previously related items of the
// player replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Player's Tiles accordingly.
// Replaces o.R.Tiles with related.
// Sets related.R.Player's Tiles accordingly.
func (o *Player) SetTiles(exec boil.Executor, insert bool, related ...*Tile) error {
	query := "update \"tiles\" set \"player_id\" = null where \"player_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Tiles {
			rel.PlayerID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Player = nil
		}

		o.R.Tiles = nil
	}
	return o.AddTiles(exec, insert, related...)
}

// RemoveTilesG relationships from objects passed in.
// Removes related items from R.Tiles (uses pointer comparison, removal does not keep order)
// Sets related.R.Player.
// Uses the global database handle.
func (o *Player) RemoveTilesG(related ...*Tile) error {
	return o.RemoveTiles(boil.GetDB(), related...)
}

// RemoveTilesP relationships from objects passed in.
// Removes related items from R.Tiles (uses pointer comparison, removal does not keep order)
// Sets related.R.Player.
// Panics on error.
func (o *Player) RemoveTilesP(exec boil.Executor, related ...*Tile) {
	if err := o.RemoveTiles(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTilesGP relationships from objects passed in.
// Removes related items from R.Tiles (uses pointer comparison, removal does not keep order)
// Sets related.R.Player.
// Uses the global database handle and panics on error.
func (o *Player) RemoveTilesGP(related ...*Tile) {
	if err := o.RemoveTiles(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTiles relationships from objects passed in.
// Removes related items from R.Tiles (uses pointer comparison, removal does not keep order)
// Sets related.R.Player.
func (o *Player) RemoveTiles(exec boil.Executor, related ...*Tile) error {
	var err error
	for _, rel := range related {
		rel.PlayerID.Valid = false
		if rel.R != nil {
			rel.R.Player = nil
		}
		if err = rel.Update(exec, "player_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Tiles {
			if rel != ri {
				continue
			}

			ln := len(o.R.Tiles)
			if ln > 1 && i < ln-1 {
				o.R.Tiles[i] = o.R.Tiles[ln-1]
			}
			o.R.Tiles = o.R.Tiles[:ln-1]
			break
		}
	}

	return nil
}

// PlayersG retrieves all records.
func PlayersG(mods ...qm.QueryMod) playerQuery {
	return Players(boil.GetDB(), mods...)
}

// Players retrieves all the records using an executor.
func Players(exec boil.Executor, mods ...qm.QueryMod) playerQuery {
	mods = append(mods, qm.From("\"players\""))
	return playerQuery{NewQuery(exec, mods...)}
}

// FindPlayerG retrieves a single record by ID.
func FindPlayerG(id int, selectCols ...string) (*Player, error) {
	return FindPlayer(boil.GetDB(), id, selectCols...)
}

// FindPlayerGP retrieves a single record by ID, and panics on error.
func FindPlayerGP(id int, selectCols ...string) *Player {
	retobj, err := FindPlayer(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPlayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayer(exec boil.Executor, id int, selectCols ...string) (*Player, error) {
	playerObj := &Player{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"players\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(playerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from players")
	}

	return playerObj, nil
}

// FindPlayerP retrieves a single record by ID with an executor, and panics on error.
func FindPlayerP(exec boil.Executor, id int, selectCols ...string) *Player {
	retobj, err := FindPlayer(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Player) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Player) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Player) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Player) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no players provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	playerInsertCacheMut.RLock()
	cache, cached := playerInsertCache[key]
	playerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			playerColumns,
			playerColumnsWithDefault,
			playerColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(playerType, playerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerType, playerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"players\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"players\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into players")
	}

	if !cached {
		playerInsertCacheMut.Lock()
		playerInsertCache[key] = cache
		playerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Player record. See Update for
// whitelist behavior description.
func (o *Player) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Player record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Player) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Player, and panics on error.
// See Update for whitelist behavior description.
func (o *Player) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Player.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Player) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	playerUpdateCacheMut.RLock()
	cache, cached := playerUpdateCache[key]
	playerUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			playerColumns,
			playerPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update players, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"players\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerType, playerMapping, append(wl, playerPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update players row")
	}

	if !cached {
		playerUpdateCacheMut.Lock()
		playerUpdateCache[key] = cache
		playerUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q playerQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q playerQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for players")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PlayerSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PlayerSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PlayerSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in player slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Player) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Player) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Player) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Player) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no players provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerUpsertCacheMut.RLock()
	cache, cached := playerUpsertCache[key]
	playerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			playerColumns,
			playerColumnsWithDefault,
			playerColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			playerColumns,
			playerPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert players, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playerPrimaryKeyColumns))
			copy(conflict, playerPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"players\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playerType, playerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerType, playerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert players")
	}

	if !cached {
		playerUpsertCacheMut.Lock()
		playerUpsertCache[key] = cache
		playerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Player record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Player) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Player record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Player) DeleteG() error {
	if o == nil {
		return errors.New("models: no Player provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Player record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Player) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Player record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Player) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Player provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerPrimaryKeyMapping)
	sql := "DELETE FROM \"players\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from players")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q playerQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q playerQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no playerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from players")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PlayerSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PlayerSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Player slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PlayerSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Player slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(playerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from player slice")
	}

	if len(playerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Player) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Player) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Player) ReloadG() error {
	if o == nil {
		return errors.New("models: no Player provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Player) Reload(exec boil.Executor) error {
	ret, err := FindPlayer(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PlayerSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PlayerSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty PlayerSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	players := PlayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"players\".* FROM \"players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&players)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlayerSlice")
	}

	*o = players

	return nil
}

// PlayerExists checks if the Player row exists.
func PlayerExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"players\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if players exists")
	}

	return exists, nil
}

// PlayerExistsG checks if the Player row exists.
func PlayerExistsG(id int) (bool, error) {
	return PlayerExists(boil.GetDB(), id)
}

// PlayerExistsGP checks if the Player row exists. Panics on error.
func PlayerExistsGP(id int) bool {
	e, err := PlayerExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PlayerExistsP checks if the Player row exists. Panics on error.
func PlayerExistsP(exec boil.Executor, id int) bool {
	e, err := PlayerExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
