// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testBoards(t *testing.T) {
	t.Parallel()

	query := Boards(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testBoardsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	board := &Board{}
	if err = randomize.Struct(seed, board, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = board.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = board.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Boards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBoardsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	board := &Board{}
	if err = randomize.Struct(seed, board, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = board.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Boards(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Boards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBoardsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	board := &Board{}
	if err = randomize.Struct(seed, board, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = board.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BoardSlice{board}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Boards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testBoardsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	board := &Board{}
	if err = randomize.Struct(seed, board, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = board.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := BoardExists(tx, board.ID)
	if err != nil {
		t.Errorf("Unable to check if Board exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BoardExistsG to return true, but got false.")
	}
}
func testBoardsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	board := &Board{}
	if err = randomize.Struct(seed, board, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = board.Insert(tx); err != nil {
		t.Error(err)
	}

	boardFound, err := FindBoard(tx, board.ID)
	if err != nil {
		t.Error(err)
	}

	if boardFound == nil {
		t.Error("want a record, got nil")
	}
}
func testBoardsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	board := &Board{}
	if err = randomize.Struct(seed, board, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = board.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Boards(tx).Bind(board); err != nil {
		t.Error(err)
	}
}

func testBoardsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	board := &Board{}
	if err = randomize.Struct(seed, board, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = board.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Boards(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBoardsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	boardOne := &Board{}
	boardTwo := &Board{}
	if err = randomize.Struct(seed, boardOne, boardDBTypes, false, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}
	if err = randomize.Struct(seed, boardTwo, boardDBTypes, false, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = boardOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = boardTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Boards(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBoardsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	boardOne := &Board{}
	boardTwo := &Board{}
	if err = randomize.Struct(seed, boardOne, boardDBTypes, false, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}
	if err = randomize.Struct(seed, boardTwo, boardDBTypes, false, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = boardOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = boardTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Boards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func boardBeforeInsertHook(e boil.Executor, o *Board) error {
	*o = Board{}
	return nil
}

func boardAfterInsertHook(e boil.Executor, o *Board) error {
	*o = Board{}
	return nil
}

func boardAfterSelectHook(e boil.Executor, o *Board) error {
	*o = Board{}
	return nil
}

func boardBeforeUpdateHook(e boil.Executor, o *Board) error {
	*o = Board{}
	return nil
}

func boardAfterUpdateHook(e boil.Executor, o *Board) error {
	*o = Board{}
	return nil
}

func boardBeforeDeleteHook(e boil.Executor, o *Board) error {
	*o = Board{}
	return nil
}

func boardAfterDeleteHook(e boil.Executor, o *Board) error {
	*o = Board{}
	return nil
}

func boardBeforeUpsertHook(e boil.Executor, o *Board) error {
	*o = Board{}
	return nil
}

func boardAfterUpsertHook(e boil.Executor, o *Board) error {
	*o = Board{}
	return nil
}

func testBoardsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Board{}
	o := &Board{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, boardDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Board object: %s", err)
	}

	AddBoardHook(boil.BeforeInsertHook, boardBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	boardBeforeInsertHooks = []BoardHook{}

	AddBoardHook(boil.AfterInsertHook, boardAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	boardAfterInsertHooks = []BoardHook{}

	AddBoardHook(boil.AfterSelectHook, boardAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	boardAfterSelectHooks = []BoardHook{}

	AddBoardHook(boil.BeforeUpdateHook, boardBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	boardBeforeUpdateHooks = []BoardHook{}

	AddBoardHook(boil.AfterUpdateHook, boardAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	boardAfterUpdateHooks = []BoardHook{}

	AddBoardHook(boil.BeforeDeleteHook, boardBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	boardBeforeDeleteHooks = []BoardHook{}

	AddBoardHook(boil.AfterDeleteHook, boardAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	boardAfterDeleteHooks = []BoardHook{}

	AddBoardHook(boil.BeforeUpsertHook, boardBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	boardBeforeUpsertHooks = []BoardHook{}

	AddBoardHook(boil.AfterUpsertHook, boardAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	boardAfterUpsertHooks = []BoardHook{}
}
func testBoardsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	board := &Board{}
	if err = randomize.Struct(seed, board, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = board.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Boards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBoardsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	board := &Board{}
	if err = randomize.Struct(seed, board, boardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = board.Insert(tx, boardColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Boards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBoardToManyRooms(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Board
	var b, c Room

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, roomDBTypes, false, roomColumnsWithDefault...)
	randomize.Struct(seed, &c, roomDBTypes, false, roomColumnsWithDefault...)

	b.BoardID = a.ID
	c.BoardID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	room, err := a.Rooms(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range room {
		if v.BoardID == b.BoardID {
			bFound = true
		}
		if v.BoardID == c.BoardID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BoardSlice{&a}
	if err = a.L.LoadRooms(tx, false, (*[]*Board)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Rooms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Rooms = nil
	if err = a.L.LoadRooms(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Rooms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", room)
	}
}

func testBoardToManyTiles(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Board
	var b, c Tile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, tileDBTypes, false, tileColumnsWithDefault...)
	randomize.Struct(seed, &c, tileDBTypes, false, tileColumnsWithDefault...)

	b.BoardID = a.ID
	c.BoardID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	tile, err := a.Tiles(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range tile {
		if v.BoardID == b.BoardID {
			bFound = true
		}
		if v.BoardID == c.BoardID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BoardSlice{&a}
	if err = a.L.LoadTiles(tx, false, (*[]*Board)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tiles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Tiles = nil
	if err = a.L.LoadTiles(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tiles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", tile)
	}
}

func testBoardToManyAddOpRooms(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Board
	var b, c, d, e Room

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, boardDBTypes, false, strmangle.SetComplement(boardPrimaryKeyColumns, boardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Room{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Room{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRooms(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.BoardID {
			t.Error("foreign key was wrong value", a.ID, first.BoardID)
		}
		if a.ID != second.BoardID {
			t.Error("foreign key was wrong value", a.ID, second.BoardID)
		}

		if first.R.Board != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Board != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Rooms[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Rooms[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Rooms(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testBoardToManyAddOpTiles(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Board
	var b, c, d, e Tile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, boardDBTypes, false, strmangle.SetComplement(boardPrimaryKeyColumns, boardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tile{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Tile{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTiles(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.BoardID {
			t.Error("foreign key was wrong value", a.ID, first.BoardID)
		}
		if a.ID != second.BoardID {
			t.Error("foreign key was wrong value", a.ID, second.BoardID)
		}

		if first.R.Board != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Board != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Tiles[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Tiles[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Tiles(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBoardsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	board := &Board{}
	if err = randomize.Struct(seed, board, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = board.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = board.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testBoardsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	board := &Board{}
	if err = randomize.Struct(seed, board, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = board.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BoardSlice{board}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testBoardsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	board := &Board{}
	if err = randomize.Struct(seed, board, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = board.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Boards(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	boardDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `ID`: `integer`, `UpdatedAt`: `timestamp without time zone`}
	_            = bytes.MinRead
)

func testBoardsUpdate(t *testing.T) {
	t.Parallel()

	if len(boardColumns) == len(boardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	board := &Board{}
	if err = randomize.Struct(seed, board, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = board.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Boards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, board, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	if err = board.Update(tx); err != nil {
		t.Error(err)
	}
}

func testBoardsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(boardColumns) == len(boardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	board := &Board{}
	if err = randomize.Struct(seed, board, boardDBTypes, true, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = board.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Boards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, board, boardDBTypes, true, boardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(boardColumns, boardPrimaryKeyColumns) {
		fields = boardColumns
	} else {
		fields = strmangle.SetComplement(
			boardColumns,
			boardPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(board))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := BoardSlice{board}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testBoardsUpsert(t *testing.T) {
	t.Parallel()

	if len(boardColumns) == len(boardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	board := Board{}
	if err = randomize.Struct(seed, &board, boardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = board.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Board: %s", err)
	}

	count, err := Boards(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &board, boardDBTypes, false, boardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	if err = board.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Board: %s", err)
	}

	count, err = Boards(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
