// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testPlayers(t *testing.T) {
	t.Parallel()

	query := Players(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPlayersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	player := &Player{}
	if err = randomize.Struct(seed, player, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = player.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = player.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Players(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	player := &Player{}
	if err = randomize.Struct(seed, player, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = player.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Players(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Players(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	player := &Player{}
	if err = randomize.Struct(seed, player, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = player.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PlayerSlice{player}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Players(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPlayersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	player := &Player{}
	if err = randomize.Struct(seed, player, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = player.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PlayerExists(tx, player.ID)
	if err != nil {
		t.Errorf("Unable to check if Player exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlayerExistsG to return true, but got false.")
	}
}
func testPlayersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	player := &Player{}
	if err = randomize.Struct(seed, player, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = player.Insert(tx); err != nil {
		t.Error(err)
	}

	playerFound, err := FindPlayer(tx, player.ID)
	if err != nil {
		t.Error(err)
	}

	if playerFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPlayersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	player := &Player{}
	if err = randomize.Struct(seed, player, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = player.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Players(tx).Bind(player); err != nil {
		t.Error(err)
	}
}

func testPlayersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	player := &Player{}
	if err = randomize.Struct(seed, player, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = player.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Players(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlayersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playerOne := &Player{}
	playerTwo := &Player{}
	if err = randomize.Struct(seed, playerOne, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}
	if err = randomize.Struct(seed, playerTwo, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playerOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = playerTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Players(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlayersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playerOne := &Player{}
	playerTwo := &Player{}
	if err = randomize.Struct(seed, playerOne, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}
	if err = randomize.Struct(seed, playerTwo, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playerOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = playerTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Players(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func playerBeforeInsertHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerAfterInsertHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerAfterSelectHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerBeforeUpdateHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerAfterUpdateHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerBeforeDeleteHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerAfterDeleteHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerBeforeUpsertHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerAfterUpsertHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func testPlayersHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Player{}
	o := &Player{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, playerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Player object: %s", err)
	}

	AddPlayerHook(boil.BeforeInsertHook, playerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	playerBeforeInsertHooks = []PlayerHook{}

	AddPlayerHook(boil.AfterInsertHook, playerAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	playerAfterInsertHooks = []PlayerHook{}

	AddPlayerHook(boil.AfterSelectHook, playerAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	playerAfterSelectHooks = []PlayerHook{}

	AddPlayerHook(boil.BeforeUpdateHook, playerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	playerBeforeUpdateHooks = []PlayerHook{}

	AddPlayerHook(boil.AfterUpdateHook, playerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	playerAfterUpdateHooks = []PlayerHook{}

	AddPlayerHook(boil.BeforeDeleteHook, playerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	playerBeforeDeleteHooks = []PlayerHook{}

	AddPlayerHook(boil.AfterDeleteHook, playerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	playerAfterDeleteHooks = []PlayerHook{}

	AddPlayerHook(boil.BeforeUpsertHook, playerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	playerBeforeUpsertHooks = []PlayerHook{}

	AddPlayerHook(boil.AfterUpsertHook, playerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	playerAfterUpsertHooks = []PlayerHook{}
}
func testPlayersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	player := &Player{}
	if err = randomize.Struct(seed, player, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = player.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Players(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlayersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	player := &Player{}
	if err = randomize.Struct(seed, player, playerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = player.Insert(tx, playerColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Players(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlayerToManyRoomPlayers(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Player
	var b, c Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, playerDBTypes, false, playerColumnsWithDefault...)
	randomize.Struct(seed, &c, playerDBTypes, false, playerColumnsWithDefault...)

	b.RoomID.Valid = true
	c.RoomID.Valid = true
	b.RoomID.Int = a.ID
	c.RoomID.Int = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	player, err := a.RoomPlayers(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range player {
		if v.RoomID.Int == b.RoomID.Int {
			bFound = true
		}
		if v.RoomID.Int == c.RoomID.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlayerSlice{&a}
	if err = a.L.LoadRoomPlayers(tx, false, (*[]*Player)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoomPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RoomPlayers = nil
	if err = a.L.LoadRoomPlayers(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoomPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", player)
	}
}

func testPlayerToManyCapturedByTiles(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Player
	var b, c Tile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, tileDBTypes, false, tileColumnsWithDefault...)
	randomize.Struct(seed, &c, tileDBTypes, false, tileColumnsWithDefault...)

	b.CapturedBy.Valid = true
	c.CapturedBy.Valid = true
	b.CapturedBy.Int = a.ID
	c.CapturedBy.Int = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	tile, err := a.CapturedByTiles(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range tile {
		if v.CapturedBy.Int == b.CapturedBy.Int {
			bFound = true
		}
		if v.CapturedBy.Int == c.CapturedBy.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlayerSlice{&a}
	if err = a.L.LoadCapturedByTiles(tx, false, (*[]*Player)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CapturedByTiles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CapturedByTiles = nil
	if err = a.L.LoadCapturedByTiles(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CapturedByTiles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", tile)
	}
}

func testPlayerToManyAddOpRoomPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Player
	var b, c, d, e Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Player{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Player{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoomPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RoomID.Int {
			t.Error("foreign key was wrong value", a.ID, first.RoomID.Int)
		}
		if a.ID != second.RoomID.Int {
			t.Error("foreign key was wrong value", a.ID, second.RoomID.Int)
		}

		if first.R.Room != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Room != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RoomPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RoomPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RoomPlayers(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPlayerToManySetOpRoomPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Player
	var b, c, d, e Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Player{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetRoomPlayers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoomPlayers(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRoomPlayers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoomPlayers(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RoomID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RoomID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.RoomID.Int {
		t.Error("foreign key was wrong value", a.ID, d.RoomID.Int)
	}
	if a.ID != e.RoomID.Int {
		t.Error("foreign key was wrong value", a.ID, e.RoomID.Int)
	}

	if b.R.Room != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Room != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Room != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Room != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RoomPlayers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RoomPlayers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPlayerToManyRemoveOpRoomPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Player
	var b, c, d, e Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Player{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddRoomPlayers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoomPlayers(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRoomPlayers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoomPlayers(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RoomID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RoomID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Room != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Room != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Room != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Room != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RoomPlayers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RoomPlayers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RoomPlayers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPlayerToManyAddOpCapturedByTiles(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Player
	var b, c, d, e Tile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tile{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Tile{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCapturedByTiles(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CapturedBy.Int {
			t.Error("foreign key was wrong value", a.ID, first.CapturedBy.Int)
		}
		if a.ID != second.CapturedBy.Int {
			t.Error("foreign key was wrong value", a.ID, second.CapturedBy.Int)
		}

		if first.R.CapturedBy != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CapturedBy != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CapturedByTiles[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CapturedByTiles[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CapturedByTiles(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPlayerToManySetOpCapturedByTiles(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Player
	var b, c, d, e Tile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tile{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetCapturedByTiles(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CapturedByTiles(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCapturedByTiles(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CapturedByTiles(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.CapturedBy.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.CapturedBy.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.CapturedBy.Int {
		t.Error("foreign key was wrong value", a.ID, d.CapturedBy.Int)
	}
	if a.ID != e.CapturedBy.Int {
		t.Error("foreign key was wrong value", a.ID, e.CapturedBy.Int)
	}

	if b.R.CapturedBy != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CapturedBy != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CapturedBy != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CapturedBy != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CapturedByTiles[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CapturedByTiles[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPlayerToManyRemoveOpCapturedByTiles(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Player
	var b, c, d, e Tile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tile{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddCapturedByTiles(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CapturedByTiles(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCapturedByTiles(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CapturedByTiles(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.CapturedBy.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.CapturedBy.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CapturedBy != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CapturedBy != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CapturedBy != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CapturedBy != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CapturedByTiles) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CapturedByTiles[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CapturedByTiles[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPlayerToOnePlayerUsingRoom(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Player
	var foreign Player

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	local.RoomID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.RoomID.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Room(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PlayerSlice{&local}
	if err = local.L.LoadRoom(tx, false, (*[]*Player)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Room == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Room = nil
	if err = local.L.LoadRoom(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Room == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPlayerToOneSetOpPlayerUsingRoom(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Player
	var b, c Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Player{&b, &c} {
		err = a.SetRoom(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Room != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoomPlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RoomID.Int != x.ID {
			t.Error("foreign key was wrong value", a.RoomID.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RoomID.Int))
		reflect.Indirect(reflect.ValueOf(&a.RoomID.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RoomID.Int != x.ID {
			t.Error("foreign key was wrong value", a.RoomID.Int, x.ID)
		}
	}
}

func testPlayerToOneRemoveOpPlayerUsingRoom(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Player
	var b Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRoom(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRoom(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Room(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Room != nil {
		t.Error("R struct entry should be nil")
	}

	if a.RoomID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RoomPlayers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPlayersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	player := &Player{}
	if err = randomize.Struct(seed, player, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = player.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = player.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPlayersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	player := &Player{}
	if err = randomize.Struct(seed, player, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = player.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PlayerSlice{player}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPlayersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	player := &Player{}
	if err = randomize.Struct(seed, player, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = player.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Players(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	playerDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `ID`: `integer`, `RoomID`: `integer`, `UpdatedAt`: `timestamp without time zone`}
	_             = bytes.MinRead
)

func testPlayersUpdate(t *testing.T) {
	t.Parallel()

	if len(playerColumns) == len(playerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	player := &Player{}
	if err = randomize.Struct(seed, player, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = player.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Players(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, player, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err = player.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPlayersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(playerColumns) == len(playerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	player := &Player{}
	if err = randomize.Struct(seed, player, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = player.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Players(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, player, playerDBTypes, true, playerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(playerColumns, playerPrimaryKeyColumns) {
		fields = playerColumns
	} else {
		fields = strmangle.SetComplement(
			playerColumns,
			playerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(player))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PlayerSlice{player}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPlayersUpsert(t *testing.T) {
	t.Parallel()

	if len(playerColumns) == len(playerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	player := Player{}
	if err = randomize.Struct(seed, &player, playerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = player.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Player: %s", err)
	}

	count, err := Players(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &player, playerDBTypes, false, playerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err = player.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Player: %s", err)
	}

	count, err = Players(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
