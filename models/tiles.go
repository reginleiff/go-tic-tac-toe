// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Tile is an object representing the database table.
type Tile struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	BoardID   int       `boil:"board_id" json:"board_id" toml:"board_id" yaml:"board_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	PlayerID  null.Int  `boil:"player_id" json:"player_id,omitempty" toml:"player_id" yaml:"player_id,omitempty"`

	R *tileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TileColumns = struct {
	ID        string
	BoardID   string
	CreatedAt string
	UpdatedAt string
	PlayerID  string
}{
	ID:        "id",
	BoardID:   "board_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	PlayerID:  "player_id",
}

// tileR is where relationships are stored.
type tileR struct {
	Board  *Board
	Player *Player
}

// tileL is where Load methods for each relationship are stored.
type tileL struct{}

var (
	tileColumns               = []string{"id", "board_id", "created_at", "updated_at", "player_id"}
	tileColumnsWithoutDefault = []string{"board_id", "created_at", "updated_at", "player_id"}
	tileColumnsWithDefault    = []string{"id"}
	tilePrimaryKeyColumns     = []string{"id"}
)

type (
	// TileSlice is an alias for a slice of pointers to Tile.
	// This should generally be used opposed to []Tile.
	TileSlice []*Tile
	// TileHook is the signature for custom Tile hook methods
	TileHook func(boil.Executor, *Tile) error

	tileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tileType                 = reflect.TypeOf(&Tile{})
	tileMapping              = queries.MakeStructMapping(tileType)
	tilePrimaryKeyMapping, _ = queries.BindMapping(tileType, tileMapping, tilePrimaryKeyColumns)
	tileInsertCacheMut       sync.RWMutex
	tileInsertCache          = make(map[string]insertCache)
	tileUpdateCacheMut       sync.RWMutex
	tileUpdateCache          = make(map[string]updateCache)
	tileUpsertCacheMut       sync.RWMutex
	tileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var tileBeforeInsertHooks []TileHook
var tileBeforeUpdateHooks []TileHook
var tileBeforeDeleteHooks []TileHook
var tileBeforeUpsertHooks []TileHook

var tileAfterInsertHooks []TileHook
var tileAfterSelectHooks []TileHook
var tileAfterUpdateHooks []TileHook
var tileAfterDeleteHooks []TileHook
var tileAfterUpsertHooks []TileHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tile) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tileBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tile) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tileBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tile) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tileBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tile) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tileBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tile) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tileAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tile) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range tileAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tile) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tileAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tile) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tileAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tile) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tileAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTileHook registers your hook function for all future operations.
func AddTileHook(hookPoint boil.HookPoint, tileHook TileHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tileBeforeInsertHooks = append(tileBeforeInsertHooks, tileHook)
	case boil.BeforeUpdateHook:
		tileBeforeUpdateHooks = append(tileBeforeUpdateHooks, tileHook)
	case boil.BeforeDeleteHook:
		tileBeforeDeleteHooks = append(tileBeforeDeleteHooks, tileHook)
	case boil.BeforeUpsertHook:
		tileBeforeUpsertHooks = append(tileBeforeUpsertHooks, tileHook)
	case boil.AfterInsertHook:
		tileAfterInsertHooks = append(tileAfterInsertHooks, tileHook)
	case boil.AfterSelectHook:
		tileAfterSelectHooks = append(tileAfterSelectHooks, tileHook)
	case boil.AfterUpdateHook:
		tileAfterUpdateHooks = append(tileAfterUpdateHooks, tileHook)
	case boil.AfterDeleteHook:
		tileAfterDeleteHooks = append(tileAfterDeleteHooks, tileHook)
	case boil.AfterUpsertHook:
		tileAfterUpsertHooks = append(tileAfterUpsertHooks, tileHook)
	}
}

// OneP returns a single tile record from the query, and panics on error.
func (q tileQuery) OneP() *Tile {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single tile record from the query.
func (q tileQuery) One() (*Tile, error) {
	o := &Tile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tiles")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Tile records from the query, and panics on error.
func (q tileQuery) AllP() TileSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Tile records from the query.
func (q tileQuery) All() (TileSlice, error) {
	var o []*Tile

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Tile slice")
	}

	if len(tileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Tile records in the query, and panics on error.
func (q tileQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Tile records in the query.
func (q tileQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tiles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q tileQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q tileQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tiles exists")
	}

	return count > 0, nil
}

// BoardG pointed to by the foreign key.
func (o *Tile) BoardG(mods ...qm.QueryMod) boardQuery {
	return o.Board(boil.GetDB(), mods...)
}

// Board pointed to by the foreign key.
func (o *Tile) Board(exec boil.Executor, mods ...qm.QueryMod) boardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.BoardID),
	}

	queryMods = append(queryMods, mods...)

	query := Boards(exec, queryMods...)
	queries.SetFrom(query.Query, "\"boards\"")

	return query
}

// PlayerG pointed to by the foreign key.
func (o *Tile) PlayerG(mods ...qm.QueryMod) playerQuery {
	return o.Player(boil.GetDB(), mods...)
}

// Player pointed to by the foreign key.
func (o *Tile) Player(exec boil.Executor, mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	query := Players(exec, queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
} // LoadBoard allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (tileL) LoadBoard(e boil.Executor, singular bool, maybeTile interface{}) error {
	var slice []*Tile
	var object *Tile

	count := 1
	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args[0] = object.BoardID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}
			args[i] = obj.BoardID
		}
	}

	query := fmt.Sprintf(
		"select * from \"boards\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Board")
	}
	defer results.Close()

	var resultSlice []*Board
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Board")
	}

	if len(tileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Board = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BoardID == foreign.ID {
				local.R.Board = foreign
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (tileL) LoadPlayer(e boil.Executor, singular bool, maybeTile interface{}) error {
	var slice []*Tile
	var object *Tile

	count := 1
	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args[0] = object.PlayerID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}
			args[i] = obj.PlayerID
		}
	}

	query := fmt.Sprintf(
		"select * from \"players\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}
	defer results.Close()

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if len(tileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Player = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID.Int == foreign.ID {
				local.R.Player = foreign
				break
			}
		}
	}

	return nil
}

// SetBoardG of the tile to the related item.
// Sets o.R.Board to related.
// Adds o to related.R.Tiles.
// Uses the global database handle.
func (o *Tile) SetBoardG(insert bool, related *Board) error {
	return o.SetBoard(boil.GetDB(), insert, related)
}

// SetBoardP of the tile to the related item.
// Sets o.R.Board to related.
// Adds o to related.R.Tiles.
// Panics on error.
func (o *Tile) SetBoardP(exec boil.Executor, insert bool, related *Board) {
	if err := o.SetBoard(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBoardGP of the tile to the related item.
// Sets o.R.Board to related.
// Adds o to related.R.Tiles.
// Uses the global database handle and panics on error.
func (o *Tile) SetBoardGP(insert bool, related *Board) {
	if err := o.SetBoard(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBoard of the tile to the related item.
// Sets o.R.Board to related.
// Adds o to related.R.Tiles.
func (o *Tile) SetBoard(exec boil.Executor, insert bool, related *Board) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tiles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"board_id"}),
		strmangle.WhereClause("\"", "\"", 2, tilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BoardID = related.ID

	if o.R == nil {
		o.R = &tileR{
			Board: related,
		}
	} else {
		o.R.Board = related
	}

	if related.R == nil {
		related.R = &boardR{
			Tiles: TileSlice{o},
		}
	} else {
		related.R.Tiles = append(related.R.Tiles, o)
	}

	return nil
}

// SetPlayerG of the tile to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.Tiles.
// Uses the global database handle.
func (o *Tile) SetPlayerG(insert bool, related *Player) error {
	return o.SetPlayer(boil.GetDB(), insert, related)
}

// SetPlayerP of the tile to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.Tiles.
// Panics on error.
func (o *Tile) SetPlayerP(exec boil.Executor, insert bool, related *Player) {
	if err := o.SetPlayer(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPlayerGP of the tile to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.Tiles.
// Uses the global database handle and panics on error.
func (o *Tile) SetPlayerGP(insert bool, related *Player) {
	if err := o.SetPlayer(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPlayer of the tile to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.Tiles.
func (o *Tile) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tiles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, tilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID.Int = related.ID
	o.PlayerID.Valid = true

	if o.R == nil {
		o.R = &tileR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			Tiles: TileSlice{o},
		}
	} else {
		related.R.Tiles = append(related.R.Tiles, o)
	}

	return nil
}

// RemovePlayerG relationship.
// Sets o.R.Player to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Tile) RemovePlayerG(related *Player) error {
	return o.RemovePlayer(boil.GetDB(), related)
}

// RemovePlayerP relationship.
// Sets o.R.Player to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Tile) RemovePlayerP(exec boil.Executor, related *Player) {
	if err := o.RemovePlayer(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePlayerGP relationship.
// Sets o.R.Player to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Tile) RemovePlayerGP(related *Player) {
	if err := o.RemovePlayer(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePlayer relationship.
// Sets o.R.Player to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Tile) RemovePlayer(exec boil.Executor, related *Player) error {
	var err error

	o.PlayerID.Valid = false
	if err = o.Update(exec, "player_id"); err != nil {
		o.PlayerID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Player = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Tiles {
		if o.PlayerID.Int != ri.PlayerID.Int {
			continue
		}

		ln := len(related.R.Tiles)
		if ln > 1 && i < ln-1 {
			related.R.Tiles[i] = related.R.Tiles[ln-1]
		}
		related.R.Tiles = related.R.Tiles[:ln-1]
		break
	}
	return nil
}

// TilesG retrieves all records.
func TilesG(mods ...qm.QueryMod) tileQuery {
	return Tiles(boil.GetDB(), mods...)
}

// Tiles retrieves all the records using an executor.
func Tiles(exec boil.Executor, mods ...qm.QueryMod) tileQuery {
	mods = append(mods, qm.From("\"tiles\""))
	return tileQuery{NewQuery(exec, mods...)}
}

// FindTileG retrieves a single record by ID.
func FindTileG(id int, selectCols ...string) (*Tile, error) {
	return FindTile(boil.GetDB(), id, selectCols...)
}

// FindTileGP retrieves a single record by ID, and panics on error.
func FindTileGP(id int, selectCols ...string) *Tile {
	retobj, err := FindTile(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTile(exec boil.Executor, id int, selectCols ...string) (*Tile, error) {
	tileObj := &Tile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tiles\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(tileObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tiles")
	}

	return tileObj, nil
}

// FindTileP retrieves a single record by ID with an executor, and panics on error.
func FindTileP(exec boil.Executor, id int, selectCols ...string) *Tile {
	retobj, err := FindTile(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Tile) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Tile) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Tile) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Tile) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no tiles provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tileColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	tileInsertCacheMut.RLock()
	cache, cached := tileInsertCache[key]
	tileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			tileColumns,
			tileColumnsWithDefault,
			tileColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(tileType, tileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tileType, tileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tiles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tiles\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tiles")
	}

	if !cached {
		tileInsertCacheMut.Lock()
		tileInsertCache[key] = cache
		tileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Tile record. See Update for
// whitelist behavior description.
func (o *Tile) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Tile record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Tile) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Tile, and panics on error.
// See Update for whitelist behavior description.
func (o *Tile) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Tile.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Tile) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	tileUpdateCacheMut.RLock()
	cache, cached := tileUpdateCache[key]
	tileUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			tileColumns,
			tilePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update tiles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tiles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tileType, tileMapping, append(wl, tilePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update tiles row")
	}

	if !cached {
		tileUpdateCacheMut.Lock()
		tileUpdateCache[key] = cache
		tileUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q tileQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q tileQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for tiles")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TileSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TileSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TileSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TileSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tiles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tilePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in tile slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Tile) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Tile) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Tile) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Tile) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no tiles provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tileUpsertCacheMut.RLock()
	cache, cached := tileUpsertCache[key]
	tileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			tileColumns,
			tileColumnsWithDefault,
			tileColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			tileColumns,
			tilePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert tiles, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tilePrimaryKeyColumns))
			copy(conflict, tilePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"tiles\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tileType, tileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tileType, tileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tiles")
	}

	if !cached {
		tileUpsertCacheMut.Lock()
		tileUpsertCache[key] = cache
		tileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Tile record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Tile) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Tile record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Tile) DeleteG() error {
	if o == nil {
		return errors.New("models: no Tile provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Tile record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Tile) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Tile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tile) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Tile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tilePrimaryKeyMapping)
	sql := "DELETE FROM \"tiles\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from tiles")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q tileQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q tileQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no tileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from tiles")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TileSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TileSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Tile slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TileSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TileSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Tile slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(tileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tiles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tilePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from tile slice")
	}

	if len(tileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Tile) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Tile) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Tile) ReloadG() error {
	if o == nil {
		return errors.New("models: no Tile provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tile) Reload(exec boil.Executor) error {
	ret, err := FindTile(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TileSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TileSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TileSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty TileSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TileSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	tiles := TileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tiles\".* FROM \"tiles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tilePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&tiles)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TileSlice")
	}

	*o = tiles

	return nil
}

// TileExists checks if the Tile row exists.
func TileExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tiles\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tiles exists")
	}

	return exists, nil
}

// TileExistsG checks if the Tile row exists.
func TileExistsG(id int) (bool, error) {
	return TileExists(boil.GetDB(), id)
}

// TileExistsGP checks if the Tile row exists. Panics on error.
func TileExistsGP(id int) bool {
	e, err := TileExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TileExistsP checks if the Tile row exists. Panics on error.
func TileExistsP(exec boil.Executor, id int) bool {
	e, err := TileExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
